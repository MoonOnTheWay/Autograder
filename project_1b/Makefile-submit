# NOTE: this is a GNU Makefile.  You must use "gmake" rather than "make".
#
# Makefile for the threads assignment.  The threads assignment must
#  be done first!
#
# Copyright (c) 1992 The Regents of the University of California.
# All rights reserved.  See copyright.h for copyright notice and limitation 
# of liability and disclaimer of warranty provisions.

# Depending on your platform, you need to select the correct definition.
# Also, you need to edit the Makefile in the bin subdirectory.

# DEC MIPS, Ultrix
#HOST = -DHOST_MIPS

# SUN SPARC, Sun 4.xx 
# HOST = -DHOST_SPARC -DHOST_IS_BIG_ENDIAN
# LDFLAGS = -lsocket -lnls

# HP PA-RISC, HP_UX
# HOST = -DHOST_SNAKE -DHOST_IS_BIG_ENDIAN

# 386, 386BSD Unix, or NetBSD Unix (available via anon ftp 
#    from agate.berkeley.edu)
# also, Linux
# HOST = $(CSE120_HOST)
# LDFLAGS = $(CSE120_LDFLAGS)

# slight variant for 386 FreeBSD
# HOST = -DHOST_i386 -DFreeBSD
# CPP=/usr/bin/cpp

HOST = -DHOST_i386



#This is a minimal Makefile for compiling cs170 project 1b (as of spring 2017)

# You might want to play with the CFLAGS, but if you use -O it may
# break the thread system.  You might want to use -fno-inline if
# you need to call some inline functions from the debugger.

# Copyright (c) 1992 The Regents of the University of California.
# All rights reserved.  See copyright.h for copyright notice and limitation 
# of liability and disclaimer of warranty provisions.

# -fwritable-strings: deprecated
INCPATH = -I.
CFLAGS = -g -Wall -Wshadow $(INCPATH) $(DEFINES) $(HOST) -DCHANGED -Wno-write-strings

# These definitions may change as the software is updated.
# Some of them are also system dependent
CPP= gcc -E
CC = g++ -m32
LD = g++ -m32
AS = as --32
MAKE = make


THREAD_H =copyright.h\
	list.h\
	scheduler.h\
	synch.h \
	synchlist.h\
	system.h\
	thread.h\
	utility.h\
	interrupt.h\
	sysdep.h\
	stats.h\
	timer.h\
	hashchain.h\
	rwlock.h

THREAD_C =main.cc\
	list.cc\
	scheduler.cc\
	synch.cc \
	synchlist.cc\
	system.cc\
	thread.cc\
	utility.cc\
	threadtest-submit.cc\
	interrupt.cc\
	sysdep.cc\
	stats.cc\
	timer.cc\
	hashchain.cc\
	rwlock.cc

THREAD_S = switch.s

THREAD_O =main.o list.o scheduler.o synch.o synchlist.o system.o thread.o \
	utility.o interrupt.o stats.o sysdep.o timer.o

S_OFILES = switch.o

C_OFILES = $(THREAD_O)

OFILES = $(C_OFILES) $(S_OFILES)

DEFINES = -DTHREADS
HFILES = $(THREAD_H)
CFILES = $(THREAD_C)

PROGRAM1 = nachos_sem
PROGRAM2 = nachos_lock
PROGRAM4 = nachos_rw
SYNCHFLAGS = -DP1_RWLOCK

#extra flags needed for compile proj1b code
PROGRAM_FLAGS =-DCHANGED -DTHREADS $(INCPATH)


.PHONY:all
all: $(PROGRAM1)-student $(PROGRAM2)-student $(PROGRAM4)-student $(PROGRAM1)-submit $(PROGRAM2)-submit $(PROGRAM4)-submit

$(PROGRAM1)-student $(PROGRAM1)-submit: SYNCHFLAGS=-DP1_SEMAPHORE
$(PROGRAM2)-student $(PROGRAM2)-submit: SYNCHFLAGS=-DP1_LOCK
$(PROGRAM4)-student $(PROGRAM4)-submit: SYNCHFLAGS=-DP1_RWLOCK

#NOTE: we directly compile the cc files for rwlock,hashchain,threadtest so that the flags get included properly at compile time
$(PROGRAM1)-student $(PROGRAM2)-student $(PROGRAM4)-student: $(OFILES) rwlock.cc hashchain.cc threadtest.cc $(THREAD_H)
	@ echo $@
	@ echo using student-provided threadtest.cc and compiling with $(SYNCHFLAGS)
	@ $(LD) $(OFILES) rwlock.cc hashchain.cc threadtest.cc $(PROGRAM_FLAGS) $(LDFLAGS) $(SYNCHFLAGS) $(TESTFLAGS) -o $@
	cp $@ nachos

$(PROGRAM1)-submit $(PROGRAM2)-submit $(PROGRAM4)-submit: $(OFILES) rwlock.cc hashchain.cc threadtest-submit.cc $(THREAD_H)
	@ echo $@
	@ echo using default threadtest-submit.cc and compiling with $(SYNCHFLAGS)
	@ $(LD) $(OFILES) rwlock.cc hashchain.cc threadtest-submit.cc $(PROGRAM_FLAGS) $(LDFLAGS) $(SYNCHFLAGS) $(TESTFLAGS) -o $@
	cp $@ nachos


$(C_OFILES): %.o:
	@ echo $<
	@ $(CC) $(CFLAGS) -c $<

switch.o: switch.s
	@ echo $<
	@ $(CPP) -P -x c $(INCPATH) $(HOST) switch.s > swtch.s
	@ $(AS) -o switch.o swtch.s

#TODO: better would be to add the needed files to submit.cs as build files
.harness:
	@ echo setting up test harness
	@ scp ~cs170/proj1b-submit-harness/* .
	@ touch .harness

$(CFILES) $(HFILES): | .harness

synch.h: | .harness
	@ stat synch.h >/dev/null 2>&1 && echo using student-provided synch.h || cp synch-submit.h synch.h && echo using default synch.h

deps.mk: $(CFILES) $(HFILES) | .harness
	@ echo building dependencies
	@ $(CC) $(INCPATH) $(DEFINES) $(HOST) -DCHANGED -M $(CFILES) > deps.mk

-include deps.mk

.PHONY:clean
clean:
	rm -f *.o *~ nachos_sem nachos_lock nachos_rw nachos_sem-submit nachos_lock-submit nachos_rw-submit nachos_sem-student nachos_lock-student nachos_rw-student deps.mk
